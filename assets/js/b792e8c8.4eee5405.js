"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[9897],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"Game of chance",sidebar_position:9},l="Game of chance",i={unversionedId:"examples/lottery",id:"examples/lottery",title:"Game of chance",description:"Introduction",source:"@site/docs/examples/lottery.md",sourceDirName:"examples",slug:"/examples/lottery",permalink:"/docs/examples/lottery",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/lottery.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_label:"Game of chance",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Escrow",permalink:"/docs/examples/escrow"},next:{title:"Dutch Auction",permalink:"/docs/examples/dutch-auction"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Source files",id:"source-files",level:2},{value:"Structs",id:"structs",level:2},{value:"Enums",id:"enums",level:2},{value:"Functions",id:"functions",level:2},{value:"User interface",id:"user-interface",level:2},{value:"Configure basic dApp in .env:",id:"configure-basic-dapp-in-env",level:3},{value:"How to run",id:"how-to-run",level:3},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"game-of-chance"},"Game of chance"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Anyone can easily create their own game application and run it on the Gear Network. To do this, Gear created an example of the Game-of-chance smart contract, which is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/lottery"},"GitHub"),". "),(0,r.kt)("p",null,"This article explains the programming interface, data structure, basic functions their purpose. It can be used as is or modified to suit your own scenarios."),(0,r.kt)("p",null,"Gear also ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/master/apps/lottery"},"provides")," an example implementation of the ",(0,r.kt)("a",{parentName:"p",href:"https://lottery.gear-tech.io/"},"Game of chance's")," user interface to demonstrate its interaction with smart contracts in the Gear Network. In this example, whoever initializes the contract is considered the game owner. Only the owner has the right to start/finish the game. Players are added to the Game of chance themselves by sending a message with their bet to the contract. Then players monitor the state of the game. The winner is determined randomly."),(0,r.kt)("p",null," You can watch a video on how to get the Game of chance application up and running and its capabilities here: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://youtu.be/35StUMjbdFc"},"https://youtu.be/35StUMjbdFc")),"."),(0,r.kt)("h2",{id:"source-files"},"Source files"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lottery/src/lib.rs")," - contains functions of the game contract."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lottery/io/src/lib.rs")," - contains Enums and structs that the contract receives and sends in the reply.")),(0,r.kt)("h2",{id:"structs"},"Structs"),(0,r.kt)("p",null,"The contract has the following structs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"struct Lottery {\n\xa0 \xa0 lottery_state: LotteryState,\n\xa0 \xa0 lottery_owner: ActorId,\n\xa0 \xa0 token_address: Option<ActorId>,\n\xa0 \xa0 players: BTreeMap<u32, Player>,\n\xa0 \xa0 lottery_history: BTreeMap<u32, ActorId>,\n\xa0 \xa0 lottery_id: u32,\n\xa0 \xa0 lottery_balance: u128,\n}\n")),(0,r.kt)("p",null,"where:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lottery_state")," - Game state: Start Time, End time of the game"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lottery_owner")," - The address of the game owner who initialized the contract"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"token_address")," - address of the token contract"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"players")," - 'map' of the game players"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lottery_history")," - 'map' of the game winners"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lottery_id")," \u2013 current game id"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lottery_balance")," - the total amount of bets in the game"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"LotteryState")," struct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct LotteryState {\n\xa0 \xa0 pub lottery_started: bool,\n\xa0 \xa0 pub lottery_start_time: u64,\n\xa0 \xa0 pub lottery_duration: u64,\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Player")," struct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Player {\n\xa0 \xa0 pub player_id: ActorId,\n\xa0 \xa0 pub balance: u128,\n}\n")),(0,r.kt)("h2",{id:"enums"},"Enums"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum LtAction {\n\xa0 \xa0 Enter(u128),\n\xa0 \xa0 StartLottery {\n\xa0 \xa0 \xa0 \xa0 duration: u64,\n\xa0 \xa0 \xa0 \xa0 token_address: Option<ActorId>,\n\xa0 \xa0 },\n\xa0 \xa0 LotteryState,\n\xa0 \xa0 PickWinner,\n}\n\npub enum LtEvent {\n\xa0 \xa0 LotteryState(LotteryState),\n\xa0 \xa0 Winner(u32),\n\xa0 \xa0 PlayerAdded(u32),\n}\n\npub enum LtState {\n\xa0 \xa0 GetWinners,\n\xa0 \xa0 GetPlayers,\n\xa0 \xa0 BalanceOf(u32),\n\xa0 \xa0 LotteryState,\n}\n\npub enum LtStateReply {\n\xa0 \xa0 Winners(BTreeMap<u32, ActorId>),\n\xa0 \xa0 Players(BTreeMap<u32, Player>),\n\xa0 \xa0 Balance(u128),\n\xa0 \xa0 LotteryState(LotteryState),\n}\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Game contract interacts with fungible token contract through function ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer_tokens"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn transfer_tokens(\n    &mut self,\n    from: &ActorId, /// - the sender address\n    to: &ActorId, /// - the recipient address\n    amount_tokens: u128 /// - the amount of tokens\n)\n")),(0,r.kt)("p",null,"This function sends a message (the action is defined in the enum\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"FTAction"),") and gets a reply (the reply is defined in the enum\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"FTEvent"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let _transfer_response: FTEvent = msg::send_and_wait_for_reply(\n    self.token_address.unwrap(), /// - the fungible token contract address\n    FTAction::Transfer {        /// - action in the fungible token-contract\n        from: *from,\n        to: *to,\n        amount: amount_tokens,\n    },\n    0,\n)\n")),(0,r.kt)("p",null,"Launches a game. Only the owner can launch a game. Game must not have been launched earlier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn start_lottery(\n    &mut self,\n    duration: u64,\n    token_address: Option<ActorId>\n)\n")),(0,r.kt)("p",null,"Called by a player in order to participate in the game. The player cannot enter the game more than once."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn enter(\n    &mut self,\n    amount: u128\n)\n")),(0,r.kt)("p",null,"Game winner calculation. Only the owner can pick the winner."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"async fn pick_winner(\n    &mut self\n)\n")),(0,r.kt)("p",null,"These functions are called in\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"async fn main()"),"\xa0through enum\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"LtAction"),"."),(0,r.kt)("p",null,"This is the entry point to the program, and the program is waiting for a message in ",(0,r.kt)("inlineCode",{parentName:"p"},"LtAction")," format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[gstd::async_main]\nasync fn main() {\n\xa0 \xa0 if msg::source() == ZERO_ID {\n\xa0 \xa0 \xa0 \xa0 panic!("Message from zero address");\n\xa0 \xa0 }\n\n\xa0 \xa0 let action: LtAction = msg::load().expect("Could not load Action");\n\xa0 \xa0 let lottery: &mut Lottery = unsafe { LOTTERY.get_or_insert(Lottery::default()) };\n\n\xa0 \xa0 match action {\n\xa0 \xa0 \xa0 \xa0 LtAction::Enter(amount) => {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 lottery.enter(amount).await;\n\xa0 \xa0 \xa0 \xa0 }\n\n\xa0 \xa0 \xa0 \xa0 LtAction::StartLottery {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 duration,\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 token_address,\n\xa0 \xa0 \xa0 \xa0 } => {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 lottery.start_lottery(duration, token_address);\n\xa0 \xa0 \xa0 \xa0 }\n\n\xa0 \xa0 \xa0 \xa0 LtAction::LotteryState => {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 msg::reply(LtEvent::LotteryState(lottery.lottery_state.clone()), 0).unwrap();\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 debug!("LotteryState: {:?}", lottery.lottery_state);\n\xa0 \xa0 \xa0 \xa0 }\n\n\xa0 \xa0 \xa0 \xa0 LtAction::PickWinner => {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 lottery.pick_winner().await;\n\xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 }\n}\n')),(0,r.kt)("p",null,"It is also important to have the ability to read the contract state off-chain. It is defined in the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"fn meta_state()"),". The contract receives a request to read the certain data (the possible requests are defined in struct\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"LtState")," ) and sends replies. The contract replies about its state are defined in the enum\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"LtStateReply"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\npub unsafe extern "C" fn meta_state() -> *mut [i32; 2] {\n\xa0 \xa0 let query: LtState = msg::load().expect("failed to decode input argument");\n\xa0 \xa0 let lottery: &mut Lottery = LOTTERY.get_or_insert(Lottery::default());\n\n\xa0 \xa0 let encoded = match query {\n\xa0 \xa0 \xa0 \xa0 LtState::GetPlayers => LtStateReply::Players(lottery.players.clone()).encode(),\n\xa0 \xa0 \xa0 \xa0 LtState::GetWinners => LtStateReply::Winners(lottery.lottery_history.clone()).encode(),\n\xa0 \xa0 \xa0 \xa0 LtState::LotteryState => LtStateReply::LotteryState(lottery.lottery_state.clone()).encode(),\n\n\xa0 \xa0 \xa0 \xa0 LtState::BalanceOf(index) => {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 if let Some(player) = lottery.players.get(&index) {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 LtStateReply::Balance(player.balance).encode()\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 } else {\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 LtStateReply::Balance(0).encode()\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 \xa0 \xa0 }\n\xa0 \xa0 };\n\n\xa0 \xa0 gstd::util::to_leak_ptr(encoded)\n}\n')),(0,r.kt)("h2",{id:"user-interface"},"User interface"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://lottery.gear-tech.io/"},"Ready-to-Use application")," example provides a user interface that interacts with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/lottery"},"Game of chance")," smart contract running in Gear Network."),(0,r.kt)("p",null,"This video demonstrates how to configure and run Game application on your own and explains the user interaction workflow: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://youtu.be/35StUMjbdFc"},"https://youtu.be/35StUMjbdFc"))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img alt",src:n(5869).Z,width:"3117",height:"1750"})),(0,r.kt)("p",null,"A game application source code is available on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/tree/master/apps/lottery"},"GitHub"),"."),(0,r.kt)("h3",{id:"configure-basic-dapp-in-env"},"Configure basic dApp in .env:"),(0,r.kt)("p",null,"For proper application functioning, one needs to create ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file and adjust an environment variable parameters. An example is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js/blob/master/apps/lottery/.env.example"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"REACT_APP_NODE_ADDRESS\nREACT_APP_LOTTERY_CONTRACT_ADDRESS\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_NODE_ADDRESS")," is the Gear Network's address (wss://rpc-node.gear-tech.io:443)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"REACT_APP_MARKETPLACE_CONTRACT_ADDRESS")," is the Game's smart contract address in the Gear Network")),(0,r.kt)("h3",{id:"how-to-run"},"How to run"),(0,r.kt)("p",null,"Install required dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install\n")),(0,r.kt)("p",null,"Run the app in the development mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm start\n")),(0,r.kt)("p",null,"Open http://localhost:3000 to view it in the browser."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"A source code of the contract example provided by Gear is available on GitHub: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/lottery/blob/master/src/lib.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"lottery/src/lib.rs")),"."),(0,r.kt)("p",null,"See also an examples of the smart contract testing implementation based on gtest:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/lottery/blob/master/src/simple_tests.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"simple_tests.rs")),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/lottery/blob/master/src/panic_tests.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"panic_tests.rs")),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/lottery/blob/master/src/token_tests.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"token_tests.rs")),"."))),(0,r.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to this article: ",(0,r.kt)("a",{parentName:"p",href:"/docs/developing-contracts/testing"},"Program Testing"),"."))}u.isMDXComponent=!0},5869:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Lottery-e1713aa5d131885a602e1c52204c04d0.png"}}]);