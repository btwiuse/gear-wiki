"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[2156],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,f=u["".concat(c,".").concat(m)]||u[m]||l[m]||i;return a?n.createElement(f,o(o({ref:t},d),{},{components:a})):n.createElement(f,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8613:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:8,sidebar_label:"Metadata & Type Creation"},o="Basics & Metadata / Type creation",s={unversionedId:"api/metadata-type-creation",id:"api/metadata-type-creation",title:"Basics & Metadata / Type creation",description:"In the context of Gear programs, metadata facilitates the interaction between the client side (javascript) and the program (Rust). Metadata is a kind of interface map that can help to identify and order a set of bytes into an understandable structure and indicates what the function it is intended for. Metadata is stored in a separate *.meta.wasm file and, in the case of decoding, it will contain a common structure:",source:"@site/docs/api/metadata-type-creation.md",sourceDirName:"api",slug:"/api/metadata-type-creation",permalink:"/docs/api/metadata-type-creation",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/metadata-type-creation.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,sidebar_label:"Metadata & Type Creation"},sidebar:"tutorialSidebar",previous:{title:"Read State",permalink:"/docs/api/read-state"},next:{title:"Mailbox",permalink:"/docs/api/mailbox"}},c={},p=[{value:"Types",id:"types",level:2}],d={toc:p};function l(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basics--metadata--type-creation"},"Basics & Metadata / Type creation"),(0,r.kt)("p",null,"In the context of Gear programs, metadata facilitates the interaction between the client side (javascript) and the program (Rust). Metadata is a kind of interface map that can help to identify and order a set of bytes into an understandable structure and indicates what the function it is intended for. Metadata is stored in a separate *.meta.wasm file and, in the case of decoding, it will contain a common structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"interface Metadata {\n  init_input?: string;\n  init_output?: string;\n  async_init_input?: string;\n  async_init_output?: string;\n  handle_input?: string;\n  handle_output?: string;\n  async_handle_input?: string;\n  async_handle_output?: string;\n  title?: string;\n  types?: string;\n  meta_state_input?: string;\n  meta_state_output?: string;\n}\n")),(0,r.kt)("p",null,"To get metadata from ",(0,r.kt)("inlineCode",{parentName:"p"},"meta.wasm")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nimport { getWasmMetadata } from '@gear-js/api';\nconst fileBuffer = fs.readFileSync('path/to/program.meta.wasm');\nconst meta = await getWasmMetadata(fileBuffer);\n\n")),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,"Metadata is defined by the type of which it consists. More information about the basic types and methods of work can be found in the main documentation of Polkadot ",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/api/start/types.basics"},"here")),(0,r.kt)("p",null,'If for some reason you need to create a type "manually" to encode/decode any payload:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { CreateType } from '@gear-js/api';\n\n// If \"TypeName\" already registered. Lear more https://polkadot.js.org/docs/api/start/types.create#choosing-how-to-create\nconst result = CreateType.create('TypeName', somePayload);\n\n// Otherwise need to add metadata containing TypeName and all required types\nconst result = CreateType.create('TypeName', somePayload, metadata);\n")),(0,r.kt)("p",null,"The result of this function is data of type ",(0,r.kt)("inlineCode",{parentName:"p"},"Codec")," and it has the following methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"result.toHex(); // - returns a hex represetation of the value\nresult.toHuman(); // - returns human-friendly object representation of the value\nresult.toString(); //  - returns a string representation of the value\nresult.toU8a(); // - encodes the value as a Unit8Array\nresult.toJSON(); // - converts the value to JSON\n")))}l.isMDXComponent=!0}}]);