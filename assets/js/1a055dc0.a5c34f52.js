"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,h=m["".concat(u,".").concat(d)]||m[d]||l[d]||i;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:10},s="Supply chain",o={unversionedId:"examples/supply-chain",id:"examples/supply-chain",title:"Supply chain",description:"Introduction",source:"@site/docs/examples/supply-chain.md",sourceDirName:"examples",slug:"/examples/supply-chain",permalink:"/docs/examples/supply-chain",draft:!1,editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/examples/supply-chain.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Dutch Auction",permalink:"/docs/examples/dutch-auction"},next:{title:"Multisig Wallet",permalink:"/docs/examples/multisig-wallet"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Logic",id:"logic",level:2},{value:"Interface",id:"interface",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Actions",id:"actions",level:3},{value:"Meta state queries",id:"meta-state-queries",level:3},{value:"Source code",id:"source-code",level:2}],c={toc:p};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"supply-chain"},"Supply chain"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This article explains at a superficial level the purpose and logic of this smart contract. For a more detailed technical description, see its ",(0,a.kt)("a",{parentName:"p",href:"https://dapps.gear.rs/supply_chain"},"documentation on the dapps documentation portal")," and ",(0,a.kt)("a",{parentName:"p",href:"#source-code"},"source code"),".")),(0,a.kt)("p",null,"In logistics, a supply chain is a system for tracking and delivering to an end consumer various items. As a rule, such systems can't work without a lot of paperwork and other layers of bureaucracy. All of this costs a lot of time and money and increases the likelihood of an accidental error or, worst of all, a fraud. With the help of smart contract and blockchain technologies, it is possible to eliminate these problems by making a supply chain more efficient, reliable and transparent."),(0,a.kt)("h2",{id:"logic"},"Logic"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each newly produced item gets the NFT (in Gear's context - ",(0,a.kt)("a",{parentName:"li",href:"/docs/examples/gnft-721"},"Gear non-fungible token (gNFT)")," and its ID equals an ID of the item. Then, as an item moves along a supply chain, an item's NFT transfers between a supply chain program, item's producer, and future distributor, retailer and end consumer."),(0,a.kt)("li",{parentName:"ul"},"Anyone who knows an item's ID can get item info."),(0,a.kt)("li",{parentName:"ul"},"Sale, purchase, delivery is made in ",(0,a.kt)("a",{parentName:"li",href:"/docs/examples/gft-20"},"Gear fungible tokens (gFT)"),".")),(0,a.kt)("p",null,"Item info has the following struct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct ItemInfo {\n    /// An item's producer address.\n    pub producer: ActorId,\n    /// An address of an item's current or past distributor address (depends on\n    /// item's `state`). If it equals [`ActorId::zero()`], then it means that an\n    /// item has never had a distributor.\n    pub distributor: ActorId,\n    /// An address of an item's current or past retailer address (depends on\n    /// item's `state`). If it equals [`ActorId::zero()`], then it means that an\n    /// item has never had a retailer.\n    pub retailer: ActorId,\n\n    pub state: ItemState,\n    /// An item's price. If it equals 0, then, depending on item's `state`, an\n    /// item is sold for free or has never been put up for sale.\n    pub price: u128,\n    /// Milliseconds during which a current seller should deliver an item.\n    pub delivery_time: u64,\n}\n")),(0,a.kt)("p",null,"And ",(0,a.kt)("inlineCode",{parentName:"p"},"ItemState")," has the following enum:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub enum ItemState {\n    Produced,\n    ForSaleByProducer,\n    PurchasedByDistributor,\n    ApprovedByProducer,\n    ShippedByProducer,\n    ReceivedByDistributor,\n    ProcessedByDistributor,\n    PackagedByDistributor,\n    ForSaleByDistributor,\n    PurchasedByRetailer,\n    ApprovedByDistributor,\n    ShippedByDistributor,\n    ReceivedByRetailer,\n    ForSaleByRetailer,\n    PurchasedByConsumer,\n}\n")),(0,a.kt)("h2",{id:"interface"},"Interface"),(0,a.kt)("h3",{id:"initialization"},"Initialization"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// Initializes the supply chain program.\n///\n/// # Requirements\n/// * Each address of `producers`, `distributors`, and `retailers` mustn't equal\n/// [`ActorId::zero()`].\n#[derive(Encode, Decode, TypeInfo, Clone)]\npub struct InitSupplyChain {\n    /// Addresses that'll have the right to interact with a supply chain on\n    /// behalf of a producer.\n    pub producers: BTreeSet<ActorId>,\n    /// Addresses that'll have the right to interact with a supply chain on\n    /// behalf of a distributor.\n    pub distributors: BTreeSet<ActorId>,\n    /// Addresses that'll have the right to interact with a supply chain on\n    /// behalf of a retailer.\n    pub retailers: BTreeSet<ActorId>,\n\n    /// A FT program address.\n    pub ft_program: ActorId,\n    /// An NFT program address.\n    pub nft_program: ActorId,\n}\n")),(0,a.kt)("h3",{id:"actions"},"Actions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// Sends a program info about what it should do.\n#[derive(Encode, Decode, TypeInfo)]\npub enum SupplyChainAction {\n    /// Produces one item and corresponding NFT with given `token_metadata`.\n    ///\n    /// Transfers a created NFT for an item to a producer ([`msg::source()`]).\n    ///\n    /// # Requirements\n    /// * [`msg::source()`] must be a producer in a supply chain.\n    ///\n    /// On success, returns [`SupplyChainEvent::Produced`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    Produce {\n        /// Item's NFT metadata.\n        token_metadata: TokenMetadata,\n    },\n\n    /// Puts a produced item up for sale to a distributor for given `price` on\n    /// behalf of a producer.\n    ///\n    /// Transfers an item's NFT to a supply chain program.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a producer of an item in\n    /// a supply chain.\n    /// * Item's [`ItemState`] must be [`Produced`](ItemState::Produced).\n    ///\n    /// On success, returns [`SupplyChainEvent::ForSaleByProducer`].\n    PutUpForSaleByProducer {\n        item_id: ItemId,\n        /// An item's price.\n        price: u128,\n    },\n\n    /// Purchases an item from a producer on behalf of a distributor.\n    ///\n    /// Transfers fungible tokens for purchasing an item to a supply chain\n    /// program until an item is received (by\n    /// [`SupplyChainAction::ReceiveByDistributor`]).\n    ///\n    /// **Note:** An item's producer must approve or not this purchase by\n    /// [`SupplyChainAction::ApproveByProducer`].\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`] must be a distributor in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ForSaleByProducer`](ItemState::ForSaleByProducer).\n    ///\n    /// On success, returns [`SupplyChainEvent::PurchasedByDistributor`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    PurchaseByDistributor {\n        item_id: ItemId,\n        /// Milliseconds during which a producer should deliver an item. A\n        /// countdown starts after [`SupplyChainAction::ShipByProducer`] is\n        /// executed.\n        delivery_time: u64,\n    },\n\n    /// Approves or not a distributor's purchase on behalf of a producer.\n    ///\n    /// If a purchase is approved, then item's [`ItemState`] changes to\n    /// [`ApprovedByProducer`](ItemState::ApprovedByProducer) and an item can be\n    /// shipped (by [`SupplyChainAction::ShipByProducer`]).\n    ///\n    /// If a purchase is **not** approved, then fungible tokens for it are\n    /// refunded from a supply chain program to a distributor.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a producer of an item in\n    /// a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`PurchasedByDistributor`](ItemState::PurchasedByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::ApprovedByProducer`].\n    ApproveByProducer {\n        item_id: ItemId,\n        /// Yes ([`true`]) or no ([`false`]).\n        approve: bool,\n    },\n\n    /// Starts shipping a purchased item to a distributor on behalf of a\n    /// producer.\n    ///\n    /// Starts a countdown for a delivery time specified for an item in\n    /// [`SupplyChainAction::PurchaseByDistributor`].\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a producer of an item in\n    /// a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ApprovedByProducer`](ItemState::ApprovedByProducer).\n    ///\n    /// On success, returns [`SupplyChainEvent::ShippedByProducer`].\n    ShipByProducer(ItemId),\n\n    /// Receives a shipped item from a producer on behalf of a distributor.\n    ///\n    /// Depending on a time spent on a delivery, transfers fungible tokens for\n    /// purchasing an item from a supply chain program to a producer or, as a\n    /// penalty for being late, refunds some or all of them to a distributor.\n    ///\n    /// Transfers an item's NFT to a distributor ([`msg::source()`]).\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`] must be a distributor of an item in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ShippedByProducer`](ItemState::ShippedByProducer).\n    ///\n    /// On success, returns [`SupplyChainEvent::ReceivedByDistributor`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    ReceiveByDistributor(ItemId),\n\n    /// Processes a received item on behalf of a distributor.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a distributor of an item\n    /// in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ReceivedByDistributor`](ItemState::ReceivedByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::ProcessedByDistributor`].\n    ProcessByDistributor(ItemId),\n\n    /// Packages a processed item on behalf of a distributor.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a distributor of an item\n    /// in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ProcessedByDistributor`](ItemState::ProcessedByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::PackagedByDistributor`].\n    PackageByDistributor(ItemId),\n\n    /// Puts a packaged item up for sale to a retailer for given `price` on\n    /// behalf of a distributor.\n    ///\n    /// Transfers an item's NFT to a supply chain program.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a distributor of an item\n    /// in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`PackagedByDistributor`](ItemState::PackagedByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::ForSaleByDistributor`].\n    PutUpForSaleByDistributor {\n        item_id: ItemId,\n        /// An item's price.\n        price: u128,\n    },\n\n    /// Purchases an item from a distributor on behalf of a retailer.\n    ///\n    /// Transfers fungible tokens for purchasing an item to a supply chain\n    /// program until an item is received (by\n    /// [`SupplyChainAction::ReceiveByRetailer`]).\n    ///\n    /// **Note:** An item's distributor must approve or not this purchase by\n    /// [`SupplyChainAction::ApproveByDistributor`].\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`] must be a retailer in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ForSaleByDistributor`](ItemState::ForSaleByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::PurchasedByRetailer`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    PurchaseByRetailer {\n        item_id: ItemId,\n        /// Milliseconds during which a distributor should deliver an item. A\n        /// countdown starts after [`SupplyChainAction::ShipByDistributor`] is\n        /// executed.\n        delivery_time: u64,\n    },\n\n    /// Approves or not a retailer's purchase on behalf of a distributor.\n    ///\n    /// If a purchase is approved, then item's [`ItemState`] changes to\n    /// [`ApprovedByDistributor`](ItemState::ApprovedByDistributor) and an item\n    /// can be shipped (by [`SupplyChainAction::ShipByDistributor`]).\n    ///\n    /// If a purchase is **not** approved, then fungible tokens for it are\n    /// refunded from a supply chain program to a retailer.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a distributor of an item\n    /// in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`PurchasedByRetailer`](ItemState::PurchasedByRetailer).\n    ///\n    /// On success, returns [`SupplyChainEvent::ApprovedByDistributor`].\n    ApproveByDistributor {\n        item_id: ItemId,\n        /// Yes ([`true`]) or no ([`false`]).\n        approve: bool,\n    },\n\n    /// Starts shipping a purchased item to a retailer on behalf of a\n    /// distributor.\n    ///\n    /// Starts a countdown for a delivery time specified for this item in\n    /// [`SupplyChainAction::PurchaseByRetailer`].\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a distributor of an item\n    /// in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ApprovedByDistributor`](ItemState::ApprovedByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::ShippedByDistributor`].\n    ShipByDistributor(ItemId),\n\n    /// Receives a shipped item from a distributor on behalf of a retailer.\n    ///\n    /// Depending on a time spent on a delivery, transfers fungible tokens for\n    /// purchasing an item from a supply chain program to a distributor or, as a\n    /// penalty for being late, refunds some or all of them to a retailer.\n    ///\n    /// Transfers an item's NFT to a retailer ([`msg::source()`]).\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`] must be a retailer of an item in\n    /// a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ShippedByDistributor`](ItemState::ShippedByDistributor).\n    ///\n    /// On success, returns [`SupplyChainEvent::ReceivedByRetailer`].\n    ///\n    /// [`msg::source()`]: gstd::msg::source\n    ReceiveByRetailer(ItemId),\n\n    /// Puts a received item up for sale to a consumer for given `price` on\n    /// behalf of a retailer.\n    ///\n    /// Transfers an item's NFT to a supply chain program.\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * [`msg::source()`](gstd::msg::source) must be a retailer of an item in\n    /// a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ReceivedByRetailer`](ItemState::ReceivedByRetailer).\n    ///\n    /// On success, returns [`SupplyChainEvent::ForSaleByRetailer`].\n    PutUpForSaleByRetailer {\n        item_id: ItemId,\n        /// An item's price.\n        price: u128,\n    },\n\n    /// Purchases an item from a retailer.\n    ///\n    /// Transfers fungible tokens for purchasing an item to its retailer.\n    ///\n    /// Transfers an item's NFT to a consumer\n    /// ([`msg::source()`](gstd::msg::source)).\n    ///\n    /// # Requirements\n    /// * An item must exist in a supply chain.\n    /// * Item's [`ItemState`] must be\n    /// [`ForSaleByRetailer`](ItemState::ForSaleByRetailer).\n    ///\n    /// On success, returns [`SupplyChainEvent::PurchasedByConsumer`].\n    PurchaseByConsumer(ItemId),\n}\n")),(0,a.kt)("h3",{id:"meta-state-queries"},"Meta state queries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// Queries a program state.\n///\n/// On failure, returns a [`Default`] value.\n#[derive(Encode, Decode, TypeInfo)]\npub enum SupplyChainStateQuery {\n    /// Gets [`ItemInfo`].\n    ///\n    /// Returns [`SupplyChainStateReply::ItemInfo`].\n    ItemInfo(ItemId),\n\n    /// Gets supply chain [`Participants`].\n    ///\n    /// Returns [`SupplyChainStateReply::Participants`].\n    Participants,\n\n    /// Gets an FT program address used by a supply chain.\n    ///\n    /// Returns [`SupplyChainStateReply::FTProgram`].\n    FTProgram,\n\n    /// Gets an NFT program address used by a supply chain.\n    ///\n    /// Returns [`SupplyChainStateReply::NFTProgram`].\n    NFTProgram,\n}\n")),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("p",null,"The source code of this example of a supply chain smart contract and an implementation of its testing is available on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-dapps/supply-chain"},"GitHub"),". They can be used as is or modified to suit your own scenarios."),(0,a.kt)("p",null,"For more details about testing smart contracts written on Gear, refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/developing-contracts/testing"},"Program Testing")," article."))}l.isMDXComponent=!0}}]);